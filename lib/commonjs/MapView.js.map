{"version":3,"sources":["MapView.tsx"],"names":["transform","externalProp","nativeEvent","event","value","MapView","React","Component","Commands","command","handlePromise","position","zoom","animated","dispatch","ReactNative","findNodeHandle","latLngFloor","imageName","imageBase64","accessKey","floorNumber","language","venue","universe","followUserMode","componentDidMount","render","onMapLoaded","onExternalLoad","onVenueWillEnter","onVenueEnter","onVenueEnterError","onVenueExit","onUniversesChange","onUniverseWillChange","onUniverseChange","onUniverseChangeError","onFloorsChange","onFloorWillChange","onFloorChange","onFloorChangeError","onMarkerClick","onMapClick","onFollowUserModeChange","onLanguageChange","onDirectionModesChange","onNavigationError","onNavigationStart","onNavigationStop","onNavigationUpdate","onNavigationWillStart","rest","props","propEvents","onMapwizeEvent","NativeView"],"mappings":"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","sourcesContent":["import React from 'react'\nimport * as ReactNative from 'react-native'\nimport { requireNativeComponent } from 'react-native'\nimport type {\n  MapwizeViewProps,\n  Floor,\n  EventValue,\n  MapwizeViewRef,\n  Venue,\n  VenuePreview,\n  Place,\n  PlacePreview,\n  Universe,\n  FollowUserMode,\n  DirectionMode,\n  LatLngFloor,\n  MapwizeInternalEvent,\n} from './types'\nimport Commands from './command'\n\nconst transform = (externalProp: any) => {\n  return ({ nativeEvent: event }: { nativeEvent: EventValue<any> }) =>\n    externalProp && externalProp(event.value)\n}\nclass MapView\n  extends React.Component<MapwizeViewProps>\n  implements MapwizeViewRef {\n  command = new Commands()\n  onMapwizeEvent = ({ nativeEvent }: { nativeEvent: MapwizeInternalEvent }) => {\n    this.command.handlePromise(nativeEvent)\n  }\n  componentDidMount() {\n    this.command.dispatch(\n      'componentDidMount',\n      ReactNative.findNodeHandle(this),\n      []\n    )\n  }\n\n  centerOn = (\n    position: LatLngFloor | Place | PlacePreview | VenuePreview | Venue,\n    zoom: number = 18,\n    animated: boolean = true\n  ) =>\n    this.command.dispatch('centerOn', ReactNative.findNodeHandle(this), [\n      position,\n      zoom,\n      animated,\n    ])\n\n  centerOnCoordinate = (latLngFloor: LatLngFloor) =>\n    this.command.dispatch(\n      'centerOnCoordinate',\n      ReactNative.findNodeHandle(this),\n      [latLngFloor]\n    )\n\n  getFloor = (): Promise<Floor> =>\n    this.command.dispatch('getFloor', ReactNative.findNodeHandle(this), [])\n  addImageToMap = (imageName: string, imageBase64: string) =>\n    this.command.dispatch('addImageToMap', ReactNative.findNodeHandle(this), [\n      imageName,\n      imageBase64,\n    ])\n  grantAccess = (accessKey: string): Promise<void> =>\n    this.command.dispatch('grantAccess', ReactNative.findNodeHandle(this), [\n      accessKey,\n    ])\n  setFloor = (floorNumber: number) =>\n    this.command.dispatch('setFloor', ReactNative.findNodeHandle(this), [\n      floorNumber,\n    ])\n  getFloors = (): Promise<Floor[]> =>\n    this.command.dispatch('getFloors', ReactNative.findNodeHandle(this), [])\n  setPreferredLanguage = (language: string) =>\n    this.command.dispatch(\n      'setPreferredLanguage',\n      ReactNative.findNodeHandle(this),\n      [language]\n    )\n  getPreferredLanguage = (): Promise<string> =>\n    this.command.dispatch(\n      'getPreferredLanguage',\n      ReactNative.findNodeHandle(this),\n      []\n    )\n  setLanguageForVenue = (language: string, venue: Venue) =>\n    this.command.dispatch(\n      'setLanguageForVenue',\n      ReactNative.findNodeHandle(this),\n      [language, venue]\n    )\n  getLanguageForVenue = (venue: Venue): Promise<string> =>\n    this.command.dispatch(\n      'getLanguageForVenue',\n      ReactNative.findNodeHandle(this),\n      [venue]\n    )\n  getLanguage = (): Promise<string> =>\n    this.command.dispatch('getLanguage', ReactNative.findNodeHandle(this), [])\n  setUniverse = (universe: Universe) =>\n    this.command.dispatch('setUniverse', ReactNative.findNodeHandle(this), [\n      universe,\n    ])\n  setUniverseForVenue = (universe: Universe, venue: Venue) =>\n    this.command.dispatch(\n      'setUniverseForVenue',\n      ReactNative.findNodeHandle(this),\n      [universe, venue]\n    )\n  getUniverse = (): Promise<Universe> =>\n    this.command.dispatch('getUniverse', ReactNative.findNodeHandle(this), [])\n  getUniverseForVenue = (venue: Venue): Promise<Universe> =>\n    this.command.dispatch(\n      'getUniverseForVenue',\n      ReactNative.findNodeHandle(this),\n      [venue]\n    )\n  getUniverses = (): Promise<Universe[]> =>\n    this.command.dispatch('getUniverses', ReactNative.findNodeHandle(this), [])\n  setFollowUserMode = (followUserMode: FollowUserMode) =>\n    this.command.dispatch(\n      'setFollowUserMode',\n      ReactNative.findNodeHandle(this),\n      [followUserMode]\n    )\n  getFollowUserMode = (): Promise<FollowUserMode> =>\n    this.command.dispatch(\n      'getFollowUserMode',\n      ReactNative.findNodeHandle(this),\n      []\n    )\n  getDirectionModes = (): Promise<DirectionMode[]> =>\n    this.command.dispatch(\n      'getDirectionModes',\n      ReactNative.findNodeHandle(this),\n      []\n    )\n\n  render() {\n    const {\n      onMapLoaded: onExternalLoad,\n      onVenueWillEnter,\n      onVenueEnter,\n      onVenueEnterError,\n      onVenueExit,\n      onUniversesChange,\n      onUniverseWillChange,\n      onUniverseChange,\n      onUniverseChangeError,\n      onFloorsChange,\n      onFloorWillChange,\n      onFloorChange,\n      onFloorChangeError,\n      onMarkerClick,\n      onMapClick,\n      onFollowUserModeChange,\n      onLanguageChange,\n      onDirectionModesChange,\n      onNavigationError,\n      onNavigationStart,\n      onNavigationStop,\n      onNavigationUpdate,\n      onNavigationWillStart,\n      ...rest\n    } = this.props\n    const propEvents: any = {\n      onVenueWillEnter: transform(onVenueWillEnter),\n      onVenueEnter: transform(onVenueEnter),\n      onVenueEnterError: transform(onVenueEnterError),\n      onVenueExit: transform(onVenueExit),\n      onUniversesChange: transform(onUniversesChange),\n      onUniverseWillChange: transform(onUniverseWillChange),\n      onUniverseChange: transform(onUniverseChange),\n      onUniverseChangeError: transform(onUniverseChangeError),\n      onFloorsChange: transform(onFloorsChange),\n      onFloorWillChange: transform(onFloorWillChange),\n      onFloorChange: transform(onFloorChange),\n      onFloorChangeError: transform(onFloorChangeError),\n      onMarkerClick: transform(onMarkerClick),\n      onMapClick: transform(onMapClick),\n      onFollowUserModeChange: transform(onFollowUserModeChange),\n      onLanguageChange: transform(onLanguageChange),\n      onDirectionModesChange: transform(onDirectionModesChange),\n      onNavigationError: transform(onNavigationError),\n      onNavigationStart: transform(onNavigationStart),\n      onNavigationStop: transform(onNavigationStop),\n      onNavigationUpdate: transform(onNavigationUpdate),\n      onNavigationWillStart: transform(onNavigationWillStart),\n    }\n    return (\n      <NativeView\n        {...rest}\n        {...propEvents}\n        onMapwizeEvent={this.onMapwizeEvent}\n        onMapLoaded={() => onExternalLoad && onExternalLoad(this)}\n      />\n    )\n  }\n}\n\nconst NativeView = requireNativeComponent('RNMWZMap')\n\nexport { MapView as default }\n"]}