{"version":3,"sources":["OfflineManager.ts"],"names":["RNMWZOfflineManager","NativeModules","count","createOfflineManager","mapwizeConfiguration","contextId","OfflineManagerImp","constructor","downloadData","offlineRegion","onProgress","eventEmitter","NativeEventEmitter","eventListener","addListener","e","downloadTaskListenerId","progress","progressListeners","progressListenerId","nextProgressListenerId","Promise","resolve","reject","then","offlineRegion1","remove","message","updateData","hasOfflineRegion","venue","universe","getOfflineRegion","getOfflineRegions","removeData","checkForUpdate"],"mappings":"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","sourcesContent":["import { NativeEventEmitter, NativeModules } from 'react-native'\n\nimport type {\n  Venue,\n  MapwizeConfiguration,\n  OfflineManager,\n  Universe,\n  OfflineRegion,\n  DownloadDataOptions,\n} from './types'\n\nconst { RNMWZOfflineManager } = NativeModules\n\nlet count: number = 0\nexport const createOfflineManager = (\n  mapwizeConfiguration: MapwizeConfiguration\n): OfflineManager => {\n  let contextId = 'context-' + count++\n  RNMWZOfflineManager.createOfflineManager(mapwizeConfiguration, contextId)\n  return new OfflineManagerImp(contextId)\n}\nclass OfflineManagerImp implements OfflineManager {\n  contextId: string\n  progressListeners: {\n    [key: string]: (progress: number) => void\n  } = {}\n  nextProgressListenerId: number = 0\n  constructor(contextId: string) {\n    this.contextId = contextId\n  }\n  downloadData(\n    offlineRegion: OfflineRegion,\n    onProgress: (progress: number) => void\n  ): Promise<OfflineRegion> {\n    const eventEmitter = new NativeEventEmitter(RNMWZOfflineManager)\n    const eventListener = eventEmitter.addListener(\n      'OfflineManagerEvent',\n      (e) => {\n        const { downloadTaskListenerId, progress, contextId } = e\n        if (contextId === this.contextId) {\n          //Handle only this instance's events\n          this.progressListeners[downloadTaskListenerId] &&\n            this.progressListeners[downloadTaskListenerId](progress)\n        }\n      }\n    )\n    const progressListenerId = '' + this.nextProgressListenerId++\n    this.progressListeners[progressListenerId] = onProgress\n    return new Promise((resolve, reject) =>\n      RNMWZOfflineManager.downloadData(\n        this.contextId,\n        progressListenerId,\n        offlineRegion\n      ).then(\n        (offlineRegion1: OfflineRegion) => {\n          eventListener.remove()\n          delete this.progressListeners[progressListenerId]\n          resolve(offlineRegion1)\n        },\n        (message: string) => {\n          eventListener.remove()\n          delete this.progressListeners[progressListenerId]\n          reject(message)\n        }\n      )\n    )\n  }\n  updateData(\n    offlineRegion: OfflineRegion,\n    onProgress: (progress: number) => void\n  ): Promise<OfflineRegion> {\n    const eventEmitter = new NativeEventEmitter(RNMWZOfflineManager)\n    const eventListener = eventEmitter.addListener(\n      'OfflineManagerEvent',\n      (e) => {\n        const { downloadTaskListenerId, progress, contextId } = e\n        if (contextId === this.contextId) {\n          //Handle only this instance's events\n          this.progressListeners[downloadTaskListenerId] &&\n            this.progressListeners[downloadTaskListenerId](progress)\n        }\n      }\n    )\n    const progressListenerId = '' + this.nextProgressListenerId++\n    this.progressListeners[progressListenerId] = onProgress\n    return new Promise((resolve, reject) =>\n      RNMWZOfflineManager.updateData(\n        this.contextId,\n        progressListenerId,\n        offlineRegion\n      ).then(\n        (offlineRegion: OfflineRegion) => {\n          eventListener.remove()\n          delete this.progressListeners[progressListenerId]\n          resolve(offlineRegion)\n        },\n        (message: string) => {\n          eventListener.remove()\n          delete this.progressListeners[progressListenerId]\n          reject(message)\n        }\n      )\n    )\n  }\n  hasOfflineRegion(venue: Venue, universe: Universe): Promise<boolean> {\n    return RNMWZOfflineManager.hasOfflineRegion(this.contextId, venue, universe)\n  }\n\n  getOfflineRegion(venue: Venue, universe: Universe): Promise<OfflineRegion> {\n    return RNMWZOfflineManager.getOfflineRegion(this.contextId, venue, universe)\n  }\n\n  getOfflineRegions(): Promise<OfflineRegion[]> {\n    return RNMWZOfflineManager.getOfflineRegions(this.contextId)\n  }\n\n  removeData(offlineRegion: OfflineRegion): Promise<void> {\n    return RNMWZOfflineManager.removeData(this.contextId, offlineRegion)\n  }\n\n  checkForUpdate(offlineRegion: OfflineRegion): Promise<Boolean> {\n    return RNMWZOfflineManager.checkForUpdate(this.contextId, offlineRegion)\n  }\n}\n\nexport default createOfflineManager\n"]}