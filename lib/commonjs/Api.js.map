{"version":3,"sources":["Api.ts"],"names":["RNMWZApi","NativeModules","count","createApi","mapwizeConfiguration","contextId","createMapwizeApi","getAccess","getAccessibleUniversesForVenue","getDirection","getDistances","getLayer","getLayerWithName","getLayerWithAlias","getLayers","getMainFroms","getMainSearches","getPlacesForPlacelist","getPlace","getPlaceWithName","getPlaceWithAlias","getPlaces","getPlacelist","getPlacelistWithName","getPlacelistWithAlias","getPlacelists","getVenue","getVenueWithName","getVenueWithAlias","getVenues","search","accessKey","venue","from","to","mode","waypoints","waypointsOptimize","constructor","Array","Platform","OS","getDirectionToMultiple","directionMode","sortByTraveltime","id","name","alias","filter","searchParams"],"mappings":"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","sourcesContent":["import { NativeModules, Platform } from 'react-native'\n\nimport type {\n  MapwizeApi,\n  ApiFilter,\n  Venue,\n  DirectionPoint,\n  DirectionMode,\n  DistanceOptions,\n  SearchParams,\n  MapwizeConfiguration,\n} from './types'\n\nconst { RNMWZApi } = NativeModules\n\nlet count: number = 0\nexport const createApi = (\n  mapwizeConfiguration: MapwizeConfiguration\n): MapwizeApi => {\n  let contextId = 'context-' + count++\n  RNMWZApi.createMapwizeApi(mapwizeConfiguration, contextId)\n  return {\n    getAccess: getAccess(contextId),\n    getAccessibleUniversesForVenue: getAccessibleUniversesForVenue(contextId),\n    getDirection: getDirection(contextId),\n    getDistances: getDistances(contextId),\n    getLayer: getLayer(contextId),\n    getLayerWithName: getLayerWithName(contextId),\n    getLayerWithAlias: getLayerWithAlias(contextId),\n    getLayers: getLayers(contextId),\n    getMainFroms: getMainFroms(contextId),\n    getMainSearches: getMainSearches(contextId),\n    getPlacesForPlacelist: getPlacesForPlacelist(contextId),\n    getPlace: getPlace(contextId),\n    getPlaceWithName: getPlaceWithName(contextId),\n    getPlaceWithAlias: getPlaceWithAlias(contextId),\n    getPlaces: getPlaces(contextId),\n    getPlacelist: getPlacelist(contextId),\n    getPlacelistWithName: getPlacelistWithName(contextId),\n    getPlacelistWithAlias: getPlacelistWithAlias(contextId),\n    getPlacelists: getPlacelists(contextId),\n    getVenue: getVenue(contextId),\n    getVenueWithName: getVenueWithName(contextId),\n    getVenueWithAlias: getVenueWithAlias(contextId),\n    getVenues: getVenues(contextId),\n    search: search(contextId),\n  }\n}\n\nconst getAccess = (contextId: string) => (accessKey: string) =>\n  RNMWZApi.getAccess(contextId, accessKey)\n\nconst getAccessibleUniversesForVenue = (contextId: string) => (venue: Venue) =>\n  RNMWZApi.getAccessibleUniversesForVenue(contextId, venue)\n\nconst getDirection = (contextId: string) => (\n  from: DirectionPoint,\n  to: DirectionPoint | DirectionPoint[],\n  mode: DirectionMode,\n  waypoints?: DirectionPoint[],\n  waypointsOptimize: boolean = false\n) => {\n  if (to.constructor === Array && Platform.OS === 'android') {\n    return RNMWZApi.getDirectionToMultiple(\n      contextId,\n      from,\n      to,\n      mode,\n      waypoints,\n      waypointsOptimize\n    )\n  } else {\n    return RNMWZApi.getDirection(\n      contextId,\n      from,\n      to,\n      mode,\n      waypoints,\n      waypointsOptimize\n    )\n  }\n}\n\nconst getDistances = (contextId: string) => (\n  from: DirectionPoint,\n  to: DirectionPoint[],\n  directionMode: DirectionMode,\n  sortByTraveltime: boolean = false\n) => RNMWZApi.getDistances(contextId, from, to, directionMode, sortByTraveltime)\n\nconst getLayer = (contextId: string) => (id: string) =>\n  RNMWZApi.getLayer(contextId, id)\n\nconst getLayerWithName = (contextId: string) => (name: string, venue: Venue) =>\n  RNMWZApi.getLayerWithName(contextId, name, venue)\n\nconst getLayerWithAlias = (contextId: string) => (\n  alias: string,\n  venue: Venue\n) => RNMWZApi.getLayerWithAlias(contextId, alias, venue)\n\nconst getLayers = (contextId: string) => (filter: ApiFilter) =>\n  RNMWZApi.getLayers(contextId, filter)\n\nconst getMainFroms = (contextId: string) => (venue: Venue) =>\n  RNMWZApi.getMainFroms(contextId, venue)\n\nconst getMainSearches = (contextId: string) => (venue: Venue) =>\n  RNMWZApi.getMainSearches(contextId, venue)\n\nconst getPlacesForPlacelist = (contextId: string) => (id: string) =>\n  RNMWZApi.getPlacesForPlacelist(contextId, id)\n\nconst getPlace = (contextId: string) => (id: string) =>\n  RNMWZApi.getPlace(contextId, id)\n\nconst getPlaceWithName = (contextId: string) => (name: string, venue: Venue) =>\n  RNMWZApi.getPlaceWithName(contextId, name, venue)\n\nconst getPlaceWithAlias = (contextId: string) => (\n  alias: string,\n  venue: Venue\n) => RNMWZApi.getPlaceWithAlias(contextId, alias, venue)\n\nconst getPlaces = (contextId: string) => (filter: ApiFilter) =>\n  RNMWZApi.getPlaces(contextId, filter)\n\nconst getPlacelist = (contextId: string) => (id: string) =>\n  RNMWZApi.getPlacelist(contextId, id)\n\nconst getPlacelistWithName = (contextId: string) => (\n  name: string,\n  venue: Venue\n) => RNMWZApi.getPlacelistWithName(contextId, name, venue)\n\nconst getPlacelistWithAlias = (contextId: string) => (\n  alias: string,\n  venue: Venue\n) => RNMWZApi.getPlacelistWithAlias(contextId, alias, venue)\n\nconst getPlacelists = (contextId: string) => (filter: ApiFilter) =>\n  RNMWZApi.getPlacelists(contextId, filter)\n\nconst getVenue = (contextId: string) => (id: string) =>\n  RNMWZApi.getVenue(contextId, id)\n\nconst getVenueWithName = (contextId: string) => (name: string) =>\n  RNMWZApi.getVenueWithName(contextId, name)\n\nconst getVenueWithAlias = (contextId: string) => (alias: string) =>\n  RNMWZApi.getVenueWithAlias(contextId, alias)\n\nconst getVenues = (contextId: string) => (filter: ApiFilter) =>\n  RNMWZApi.getVenues(contextId, filter)\n\nconst search = (contextId: string) => (searchParams: SearchParams) =>\n  RNMWZApi.search(contextId, searchParams)\n\nexport default createApi\n"]}