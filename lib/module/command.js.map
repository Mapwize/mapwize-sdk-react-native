{"version":3,"sources":["command.ts"],"names":["UIManager","NativeModules","Platform","RNMWZMap","MyUIManager","Command","constructor","methodName","nativeRef","args","OS","promiseId","nextPromiseId","Promise","accept","reject","promisesMap","dispatchViewManagerCommand","event","success","value","p","message"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,aAApB,EAAmCC,QAAnC,QAAmD,cAAnD;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAeF,aAArB;AACA,MAAMG,WAAW,GAAGJ,SAApB;;AAEA,MAAMK,OAAN,CAAc;AAKZC,EAAAA,WAAW,GAAG;AAAA,yCAFV,EAEU;;AAAA,2CADE,CACF;;AAAA,sCACH,CACTC,UADS,EAETC,SAFS,EAGTC,IAHS,KAIQ;AACjB,UAAIP,QAAQ,CAACQ,EAAT,KAAgB,SAApB,EAA+B;AAC7B,cAAMC,SAAS,GAAG,KAAKC,aAAL,EAAlB;AACA,eAAO,IAAIC,OAAJ,CAAkB,CAACC,MAAD,EAASC,MAAT,KAAoB;AAC3C,eAAKC,WAAL,CAAiBL,SAAjB,IAA8B;AAAEG,YAAAA,MAAF;AAAUC,YAAAA;AAAV,WAA9B;AACAX,UAAAA,WAAW,CAACa,0BAAZ,CAAuCT,SAAvC,EAAkDD,UAAlD,EAA8D,CAC5DI,SAD4D,EAE5D,GAAGF,IAFyD,CAA9D;AAID,SANM,CAAP;AAOD,OATD,MASO;AACL,eAAON,QAAQ,CAACI,UAAD,CAAR,CAAqBC,SAArB,EAAgC,GAAGC,IAAnC,CAAP;AACD;AACF,KAlBa;;AAAA,2CAmBGS,KAAD,IAAiC;AAC/C,YAAM;AAAEP,QAAAA,SAAF;AAAaQ,QAAAA,OAAb;AAAsBC,QAAAA;AAAtB,UAAgCF,KAAtC;AACA,YAAMG,CAAC,GAAG,KAAKL,WAAL,CAAiBL,SAAjB,CAAV;AACA,aAAO,KAAKK,WAAL,CAAiBL,SAAjB,CAAP;;AACA,UAAIQ,OAAJ,EAAa;AACXE,QAAAA,CAAC,CAACP,MAAF,CAASM,KAAT;AACD,OAFD,MAEO;AACLC,QAAAA,CAAC,CAACN,MAAF,CAASK,KAAK,IAAIA,KAAK,CAACE,OAAxB;AACD;AACF,KA5Ba;AAAE;;AALJ;;AAmCd,eAAejB,OAAf","sourcesContent":["import { UIManager, NativeModules, Platform } from 'react-native'\nimport type { MapwizeInternalEvent } from './types'\nconst { RNMWZMap } = NativeModules\nconst MyUIManager = UIManager as any\ntype AcceptReject = (val?: any) => void\nclass Command {\n  promisesMap: {\n    [key: string]: { accept: AcceptReject; reject: AcceptReject }\n  } = {}\n  nextPromiseId = 0\n  constructor() {}\n  dispatch = (\n    methodName: string,\n    nativeRef: any,\n    args: any[]\n  ): Promise<any> => {\n    if (Platform.OS === 'android') {\n      const promiseId = this.nextPromiseId++\n      return new Promise<void>((accept, reject) => {\n        this.promisesMap[promiseId] = { accept, reject }\n        MyUIManager.dispatchViewManagerCommand(nativeRef, methodName, [\n          promiseId,\n          ...args,\n        ])\n      })\n    } else {\n      return RNMWZMap[methodName](nativeRef, ...args)\n    }\n  }\n  handlePromise = (event: MapwizeInternalEvent) => {\n    const { promiseId, success, value } = event\n    const p = this.promisesMap[promiseId]\n    delete this.promisesMap[promiseId]\n    if (success) {\n      p.accept(value)\n    } else {\n      p.reject(value && value.message)\n    }\n  }\n}\nexport default Command\n"]}