{"version":3,"sources":["types.ts"],"names":["DownloadDataOptions","constructor","venue","universe","minZoom","maxZoom","PlaceStyleProp","placeId","style","MarkerProp","position","markerName","DirectionProp","direction","directionOptions","NavigationProp","destination","directionMode","maxDistanceBeforeRecompute","OfflineRegion","NavigationInfo","duration","distance","locationDelta","originalLocation","snappedLocation","MapwizeConfiguration","apiKey","telemetryEnabled","setServerUrl","serverUrl","setStyleUrl","styleUrl","setCacheSize","cacheSize","setRefreshInterval","refreshInterval","setTelemetryEnabled","ApiFilter","setVenueId","venueId","setUniverseId","universeId","setOrganizationId","organizationId","setFloor","floor","setVenueIds","venueIds","setIsVisible","isVisible","setName","name","setLatitudeMin","latitudeMin","setLatitudeMax","latitudeMax","setLongitudeMin","longitudeMin","setLongitudeMax","longitudeMax","SearchParams","query","setObjectClasses","objectClasses","Direction","from","to","traveltime","route","bounds","waypoints","subdirections","mode","DirectionPointWrapper","latitude","longitude","placeListId","DirectionPointWrapperAndDistance","DistanceResponse","distances","DirectionMode","_id","averageSpeed","type","Floor","number","Route","fromFloor","toFloor","isStart","isEnd","timeToEnd","connectorTypeTo","connectorTypeFrom","path","LatLng","LatLngFloor","LatLngFloorInVenue","LatLngBounds","southWest","northEast","Layer","universes","order","MapwizeIcon","iconKey","iconBase64","Universe","Organization","Translation","title","subtitle","details","language","Place","alias","iconUrl","translations","translation","fillColor","fillOpacity","strokeColor","strokeOpacity","strokeWidth","markerDisplay","isSearchable","isClickable","markerCoordinate","entranceCoordinate","placeTypeId","Venue","defaultLanguage","supportedLanguages","defaultCenter","defaultZoom","defaultFloor","defaultBearing","defaultPitch","Placelist","placeIds","data","Style","iconName","shapeDisplay","UserInfo","displayName","email","organizations","ClickEvent","eventType","latLngFloor","placePreview","venuePreview","PlacePreview","VenuePreview","DirectionOptions","endMarkerIconName","displayEndMarker","centerOnStart","displayStartingFloor","setEndMarkerIconName","setDisplayEndMarker","setCenterOnStart","setDisplayStartingFloor","MapOptions","setLanguage","setCenterOnVenueId","centerOnVenueId","setCenterOnPlaceId","centerOnPlaceId","setRestrictContentToVenueIds","restrictContentToVenueIds","setRestrictContentToOrganizationId","restrictContentToOrganizationId","setLogoClickable","logoClickable","Marker","markerIconName","FollowUserMode","followUserMode","IndoorLocation","provider","time","MapwizeIndoorLocation"],"mappings":"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","sourcesContent":["import type { StyleProp, ViewStyle } from 'react-native'\n\n/**\n * MapwizeApi is the entry point to retrieve Mapwize data from the Mapwize backend.\n * It can be instantiated using CreateMapwizeAPI(mapwizeConfiguration:MapwizeConfiguration)\n */\nexport interface MapwizeApi {\n  /**\n   * Gain access to private building using an access key\n   */\n  getAccess: (accessKey: string) => Promise<boolean>\n  /**\n   * Get the list of universes that are accessible for this venue\n   */\n  getAccessibleUniversesForVenue: (venue: Venue) => Promise<Universe[]>\n  /**\n   * Get the direction between a starting point and a destination.\n   * The destination can be one or multiple DirectionPoint\n   * You can optionally add some waypoints\n   */\n  getDirection: (\n    from: DirectionPoint,\n    to: DirectionPoint | DirectionPoint[],\n    mode: DirectionMode,\n    waypoints?: DirectionPoint[],\n    waypointsOptimize?: boolean\n  ) => Promise<Direction>\n  /**\n   * Get the distances between a starting point and a list of destination\n   */\n  getDistances: (\n    from: DirectionPoint,\n    to: DirectionPoint[],\n    directionMode: DirectionMode,\n    sortByTraveltime: boolean\n  ) => Promise<DistanceResponse>\n  /**\n   * Get a layer using its id\n   */\n  getLayer: (id: string) => Promise<Layer>\n  /**\n   * Get a layer using its name. As a layer name is only unique in a specific venue, you have to pass this venue as parameter\n   */\n  getLayerWithName: (name: string, venue: Venue) => Promise<Layer>\n  /**\n   * Get a layer using its alias. As a layer alias is only unique in a specific venue, you have to pass this venue as parameter\n   */\n  getLayerWithAlias: (alias: string, venue: Venue) => Promise<Layer>\n  /**\n   * Get all the layers that match the ApiFilter\n   */\n  getLayers: (params: ApiFilter) => Promise<Layer[]>\n  /**\n   * Get the main froms for the specific venue\n   */\n  getMainFroms: (venue: Venue) => Promise<Place[]>\n  /**\n   * Get the main searches for the specific venue\n   */\n  getMainSearches: (venue: Venue) => Promise<MapwizeObject[]>\n  /**\n   * Get a place using its id\n   */\n  getPlace: (id: string) => Promise<Place>\n  /**\n   * Get a place using its name. As a place name is only unique in a specific venue, you have to pass this venue as parameter\n   */\n  getPlaceWithName: (name: string, venue: Venue) => Promise<Place>\n  /**\n   * Get a place using its alias. As a place alias is only unique in a specific venue, you have to pass this venue as parameter\n   */\n  getPlaceWithAlias: (alias: string, venue: Venue) => Promise<Place>\n  /**\n   * Get all the places that match the ApiFilter\n   */\n  getPlaces: (params: ApiFilter) => Promise<Place[]>\n  /**\n   * Get all places contained in the placelist\n   */\n  getPlacesForPlacelist: (placelist: Placelist) => Promise<Place[]>\n  /**\n   * Get a placelist using its id\n   */\n  getPlacelist: (id: string) => Promise<Placelist>\n  /**\n   * Get a placelist using its name. As a placelist name is only unique in a specific venue, you have to pass this venue as parameter\n   */\n  getPlacelistWithName: (name: string, venue: Venue) => Promise<Placelist>\n  /**\n   * Get a placelist using its alias. As a placelist alias is only unique in a specific venue, you have to pass this venue as parameter\n   */\n  getPlacelistWithAlias: (alias: string, venue: Venue) => Promise<Placelist>\n  /**\n   * Get all the placelists that match the ApiFilter\n   */\n  getPlacelists: (filter: ApiFilter) => Promise<Placelist[]>\n  /**\n   * Get a venue using its id\n   */\n  getVenue: (id: string) => Promise<Venue>\n  /**\n   * Get a venue using its name\n   */\n  getVenueWithName: (name: string) => Promise<Venue>\n  /**\n   * Get a venue using its alias\n   */\n  getVenueWithAlias: (alias: string) => Promise<Venue>\n  /**\n   * Get all venue that match the ApiFilter\n   */\n  getVenues: (filter: ApiFilter) => Promise<Venue[]>\n  /**\n   * Get search result using the SearchParams\n   */\n  search: (searchParams: SearchParams) => Promise<MapwizeObject[]>\n}\n/**\n * OfflineManager is the entry point to download Mapwize offline data.\n * It can be instantiated using createOfflineManager(mapwizeConfiguration:MapwizeConfiguration)\n */\nexport interface OfflineManager {\n  /**\n   * Download offline data for the given (venue, universe) pair\n   */\n  downloadData: (\n    offlineRegion: OfflineRegion,\n    onProgress: (progress: number) => void\n  ) => Promise<OfflineRegion>\n  /**\n   * Update the offline data for a given offline region if something has changed.\n   */\n  updateData: (\n    offlineRegion: OfflineRegion,\n    onProgress: (progress: number) => void\n  ) => Promise<OfflineRegion>\n  /**\n   * Check if a pair of venue universe is accessible offline\n   * @param venue  the venue to be downloaded.\n   * @param universe  the universe to be downloaded.\n   */\n  hasOfflineRegion: (venue: Venue, universe: Universe) => Promise<boolean>\n  /**\n   * Get an offline region using a (venue, universe) pair\n   * @param venue  the venue to be downloaded.\n   * @param universe  the universe to be downloaded.\n   */\n  getOfflineRegion: (venue: Venue, universe: Universe) => Promise<OfflineRegion>\n  /**\n   * Get all the offline regions\n   */\n  getOfflineRegions: () => Promise<OfflineRegion[]>\n  /**\n   * remove an offline region\n   */\n  removeData: (offlineRegion: OfflineRegion) => Promise<void>\n  /**\n   * check if there is an update for a given offline region\n   */\n  checkForUpdate: (offlineRegion: OfflineRegion) => Promise<Boolean>\n}\n\nexport class DownloadDataOptions {\n  venue: Venue\n  universe: Universe\n  minZoom: number\n  maxZoom: number\n  constructor(\n    venue: Venue,\n    universe: Universe,\n    minZoom: number = 18,\n    maxZoom: number = 23\n  ) {\n    this.venue = venue\n    this.universe = universe\n    this.minZoom = minZoom\n    this.maxZoom = maxZoom\n  }\n}\n/*\nMapView direct methods\n*/\nexport interface MapwizeViewRef {\n  /**\n   * Add an image to the map in order to be able to use its name in other Mapwize method/props\n   */\n  addImageToMap: (imageName: string, imageBase64: string) => void\n\n  /**\n   * Gain access to private building using an access key\n   */\n  grantAccess: (accessKey: string) => Promise<void>\n\n  /**\n   * Center on a specific location.\n   * @param position Can be a LatLngFloor, a Place, a PlacePreview, a Venue or a VenuePreview\n   * @param zoom Optional the targeted camera zoom level. Default value is 18\n   * @param animated Optional If true, the camera movement will be animated. Default is true\n   */\n  centerOn: (\n    position: LatLngFloor | Place | PlacePreview | VenuePreview | Venue,\n    zoom?: number,\n    animated?: boolean\n  ) => void\n\n  /**\n   * Set the current displayed floor\n   * @param floorNumber that will be set\n   */\n  setFloor: (floorNumber: number) => void\n  /**\n   * Get the current displayed floor\n   */\n  getFloor: () => Promise<Floor>\n  /**\n   * Get the current accessible floors regarding the venue/universe displayed\n   */\n  getFloors: () => Promise<Floor[]>\n\n  /**\n   * Set the preferred language that should be chosen if available when entering in a venue\n   */\n  setPreferredLanguage: (language: string) => void\n  /**\n   * Get the preferred language that should be chosen if available when entering in a venue\n   */\n  getPreferredLanguage: () => Promise<string>\n  /**\n   * Set the language for a specific venue\n   */\n  setLanguageForVenue: (language: string, venue: Venue) => void\n  /**\n   * Get the language for a specific venue\n   */\n  getLanguageForVenue: (venue: Venue) => Promise<string>\n  /**\n   * Get the current language.\n   * If in a venue, it will return the language set for this venue.\n   * Otherwise, it will return the preferred language.\n   */\n  getLanguage: () => Promise<string>\n\n  /**\n   * Set universe. If in a venue, it will set the universe for this venue.\n   * Otherwise, it will set the universe for the next venue you enter in.\n   */\n  setUniverse: (universe: Universe) => void\n  /**\n   * Set universe for the specific venue.\n   */\n  setUniverseForVenue: (universe: Universe, venue: Venue) => void\n  /**\n   * Get the current universe.\n   */\n  getUniverse: () => Promise<Universe>\n  /**\n   * Get the universe for a specific venue.\n   */\n  getUniverseForVenue: (venue: Venue) => Promise<Universe>\n  /**\n   * Get the list of accessible universe.\n   */\n  getUniverses: () => Promise<Universe[]>\n  /**\n   * Set the follow user mode\n   */\n  setFollowUserMode: (followUserMode: FollowUserMode) => void\n  /**\n   * Get the follow user mode\n   */\n  getFollowUserMode: () => Promise<FollowUserMode>\n  /**\n   * Get the accessible direction mode for the venue / universe currently displayed\n   */\n  getDirectionModes: () => Promise<DirectionMode[]>\n}\n\n/*\nMapView Props\n*/\nexport interface MapwizeViewProps {\n  style?: StyleProp<ViewStyle>\n  ref?: React.RefObject<MapwizeViewRef>\n  /**\n   * The mapwize configuration that will be used for this instance of MapwizeView\n   */\n  mapwizeConfiguration: MapwizeConfiguration\n  /**\n   * The map options that will be used to initialized this instance of MapwizeView\n   */\n  mapOptions: MapOptions\n  /**\n   * The user current location\n   */\n  userLocation: LatLngFloor | undefined\n  /**\n   * Markers that are currently displayed on the map.\n   */\n  markers: MarkerProp[] | undefined\n  /**\n   * Places that are currently promoted on the map\n   */\n  promotedPlaces: (Place | PlacePreview | Placelist)[] | undefined\n  /**\n   * Custom place styles\n   */\n  placeStyles: PlaceStyleProp[] | undefined\n  /**\n   * Direction that is currentrly displayed on the map\n   */\n  mapDirection: DirectionProp | undefined\n  /**\n   * Navigation that is currentrly displayed on the map\n   */\n  mapNavigation: NavigationProp | undefined\n  onMapwizeEvent?: ({\n    nativeEvent,\n  }: {\n    nativeEvent: MapwizeInternalEvent\n  }) => void\n  /**\n   * Called when the MapwizeMap component is fully load and ready to be used.\n   * You can use this method to get the MapwizeViewRef\n   */\n  onMapLoaded?: (ref: MapwizeViewRef) => void\n\n  /**\n   * Called when a venue start loading\n   */\n  onVenueWillEnter?: (venue: Venue) => void\n  /**\n   * Called when a venue is loaded\n   */\n  onVenueEnter?: (venue: Venue) => void\n  /**\n   * Called when something goes wrong trying to enter in a venue\n   */\n  onVenueEnterError?: (venue: Venue, error: Error) => void\n  /**\n   * Called when a venue is exit\n   */\n  onVenueExit?: (venue: Venue) => void\n\n  /**\n   * Called when the accessible universes changed\n   */\n  onUniversesChange?: (universes: Universe[]) => void\n  /**\n   * Called when a universe is going to be loaded\n   */\n  onUniverseWillChange?: (universe: Universe) => void\n  /**\n   * Called when a universe is loaded\n   */\n  onUniverseChange?: (universe: Universe) => void\n  /**\n   * Called when something goes wrong  trying to load a universe\n   */\n  onUniverseChangeError?: (universe: Universe, error: Error) => void\n  /**\n   * Called when the accessible floors changed\n   */\n  onFloorsChange?: (floors: Floor[]) => void\n  /**\n   * Called when a floor is going to be loaded\n   */\n  onFloorWillChange?: (floor: Floor) => void\n  /**\n   * Called when a floor is loaded\n   */\n  onFloorChange?: (floor: Floor) => void\n  /**\n   * Called when something goes wrong trying to load a floor\n   */\n  onFloorChangeError?: (floor: Floor, error: Error) => void\n  /**\n   * Called when the user click on a marker\n   */\n  onMarkerClick?: (marker: Marker) => void\n  /**\n   * Called when the user click on the map\n   */\n  onMapClick?: (clickEvent: ClickEvent) => void\n  /**\n   * Called when the follow user mode changed\n   */\n  onFollowUserModeChange?: (followUserMode: FollowUserMode) => void\n  /**\n   * Called when the current language changed\n   */\n  onLanguageChange?: (language: string) => void\n  /**\n   * Called when the accessible direction mode changed\n   */\n  onDirectionModesChange?: (directionModes: DirectionMode[]) => void\n  /**\n   * Called when a navigation is about to start\n   */\n  onNavigationWillStart?: () => void\n  /**\n   * Called when a navigation started\n   */\n  onNavigationStart?: () => void\n  /**\n   * Called when a navigation update is avaible\n   */\n  onNavigationUpdate?: (navigationInfo: NavigationInfo) => void\n  /**\n   * Called when a navigation stopped\n   */\n  onNavigationStop?: () => void\n  /**\n   * Called when something goes wrong with a navigation\n   */\n  onNavigationError?: (message: string) => void\n}\n\n/**\n * PlaceStyleProp contains required properties to set a custom style for a place\n */\nexport class PlaceStyleProp {\n  placeId: string\n  style: Style\n  constructor(placeId: string, style: Style) {\n    this.placeId = placeId\n    this.style = style\n  }\n}\n\n/**\n * MarkerProp contains required properties to display markers on the map\n */\nexport class MarkerProp {\n  position: LatLngFloor | PlacePreview | Place | Placelist\n  markerName?: string\n  constructor(\n    position: LatLngFloor | PlacePreview | Place | Placelist,\n    markerName?: string\n  ) {\n    this.position = position\n    this.markerName = markerName\n  }\n}\n\n/**\n * DirectionProp contains required properties to display a direction on the map\n */\nexport class DirectionProp {\n  direction: Direction\n  directionOptions: DirectionOptions\n  constructor(direction: Direction, directionOptions: DirectionOptions) {\n    this.direction = direction\n    this.directionOptions = directionOptions\n  }\n}\n\n/**\n * NavigationProp contains required properties to display a navigation on the map\n */\nexport class NavigationProp {\n  destination: DirectionPoint\n  directionMode: DirectionMode\n  directionOptions: DirectionOptions\n  maxDistanceBeforeRecompute?: number\n  constructor(\n    destination: DirectionPoint,\n    directionMode: DirectionMode,\n    directionOptions: DirectionOptions,\n    maxDistanceBeforeRecompute?: number\n  ) {\n    this.destination = destination\n    this.directionMode = directionMode\n    this.directionOptions = directionOptions\n    this.maxDistanceBeforeRecompute = maxDistanceBeforeRecompute\n  }\n}\n\n/**\n * OfflineRegion contains information about the downloaded (Venue,universe) pair.\n * You should not create an OfflineRegion info yourself.\n */\nexport class OfflineRegion {\n  venue: Venue\n  universe: Universe\n  minZoom?: number\n  maxZoom?: number\n  constructor(\n    venue: Venue,\n    universe: Universe,\n    minZoom: number = 18,\n    maxZoom: number = 23\n  ) {\n    this.venue = venue\n    this.universe = universe\n    this.minZoom = minZoom\n    this.maxZoom = maxZoom\n  }\n}\n/**\n * NavigationInfo contains information about the current Navigation such as the remaining distance, duration.\n * You should not create a Navigation info yourself.\n */\nexport class NavigationInfo {\n  duration: number\n  distance: number\n  locationDelta: number\n  originalLocation: LatLngFloor\n  snappedLocation: LatLngFloor\n  constructor(\n    duration: number,\n    distance: number,\n    locationDelta: number,\n    originalLocation: LatLngFloor,\n    snappedLocation: LatLngFloor\n  ) {\n    this.duration = duration\n    this.distance = distance\n    this.locationDelta = locationDelta\n    this.originalLocation = originalLocation\n    this.snappedLocation = snappedLocation\n  }\n}\n\n/**\n * Internal use only\n */\nexport interface EventValue<T> {\n  value: T\n}\n\n/**\n * Internal use only\n */\nexport interface MapwizeInternalEvent {\n  promiseId: number\n  success: boolean\n  value: any\n}\n\n/**\n * Mapwize Configuration contains properties that are required to use the map and the api.\n */\nexport class MapwizeConfiguration {\n  objectClass = 'MapwizeConfiguration'\n  apiKey: string\n  serverUrl?: string\n  styleUrl?: string\n  cacheSize?: number\n  refreshInterval?: number\n  telemetryEnabled: boolean\n  constructor(apiKey: string) {\n    this.apiKey = apiKey\n    this.telemetryEnabled = true\n  }\n  setServerUrl(serverUrl: string): MapwizeConfiguration {\n    this.serverUrl = serverUrl\n    return this\n  }\n  setStyleUrl(styleUrl: string): MapwizeConfiguration {\n    this.styleUrl = styleUrl\n    return this\n  }\n  setCacheSize(cacheSize: number): MapwizeConfiguration {\n    this.cacheSize = cacheSize\n    return this\n  }\n  setRefreshInterval(refreshInterval: number): MapwizeConfiguration {\n    this.refreshInterval = refreshInterval\n    return this\n  }\n  setTelemetryEnabled(telemetryEnabled: boolean): MapwizeConfiguration {\n    this.telemetryEnabled = telemetryEnabled\n    return this\n  }\n}\n\n/**\n * ApiFilter are used in the Api to limit the result to intersting value for you\n */\nexport class ApiFilter {\n  objectClass = 'ApiFilter'\n  venueId?: string\n  universeId?: string\n  organizationId?: string\n  floor?: number\n  venueIds?: Array<string>\n  isVisible?: boolean\n  alias?: string\n  name?: string\n  latitudeMin?: number\n  latitudeMax?: number\n  longitudeMin?: number\n  longitudeMax?: number\n  constructor() {}\n  setVenueId(venueId: string): ApiFilter {\n    this.venueId = venueId\n    return this\n  }\n  setUniverseId(universeId: string): ApiFilter {\n    this.universeId = universeId\n    return this\n  }\n  setOrganizationId(organizationId: string): ApiFilter {\n    this.organizationId = organizationId\n    return this\n  }\n  setFloor(floor: number): ApiFilter {\n    this.floor = floor\n    return this\n  }\n  setVenueIds(venueIds: Array<string>): ApiFilter {\n    this.venueIds = venueIds\n    return this\n  }\n  setIsVisible(isVisible: boolean): ApiFilter {\n    this.isVisible = isVisible\n    return this\n  }\n  setName(name: string): ApiFilter {\n    this.name = name\n    return this\n  }\n  setLatitudeMin(latitudeMin: number): ApiFilter {\n    this.latitudeMin = latitudeMin\n    return this\n  }\n  setLatitudeMax(latitudeMax: number): ApiFilter {\n    this.latitudeMax = latitudeMax\n    return this\n  }\n  setLongitudeMin(longitudeMin: number): ApiFilter {\n    this.longitudeMin = longitudeMin\n    return this\n  }\n  setLongitudeMax(longitudeMax: number): ApiFilter {\n    this.longitudeMax = longitudeMax\n    return this\n  }\n}\n\n/**\n * SearchParams contains properties that allow you to search points of interest\n */\nexport class SearchParams {\n  objectClass = 'SearchParams'\n  query: string\n  venueId?: string\n  venueIds?: Array<string>\n  organizationId?: string\n  universeId?: string\n  objectClasses?: Array<'place' | 'placelist' | 'venue'>\n  constructor(query: string) {\n    this.query = query\n  }\n  setVenueId(venueId?: string): SearchParams {\n    this.venueId = venueId\n    return this\n  }\n  setVenueIds(venueIds?: Array<string>): SearchParams {\n    this.venueIds = venueIds\n    return this\n  }\n  setOrganizationId(organizationId?: string): SearchParams {\n    this.organizationId = organizationId\n    return this\n  }\n  setUniverseId(universeId?: string): SearchParams {\n    this.universeId = universeId\n    return this\n  }\n  setObjectClasses(\n    objectClasses?: Array<'place' | 'placelist' | 'venue'>\n  ): SearchParams {\n    this.objectClasses = objectClasses\n    return this\n  }\n}\n\n/**\n * Direction that can be displayed on the map.\n * This object is provided by the Api.getDirection method. You should not instantiate it yourself\n */\nexport class Direction {\n  objectClass = 'Direction'\n  from: DirectionPointWrapper\n  to: DirectionPointWrapper\n  distance: number\n  traveltime: number\n  route: Array<Route>\n  bounds: LatLngBounds\n  waypoints: Array<DirectionPointWrapper>\n  subdirections: Array<Direction>\n  mode: DirectionMode\n  constructor(\n    from: DirectionPointWrapper,\n    to: DirectionPointWrapper,\n    distance: number,\n    traveltime: number,\n    route: Array<Route>,\n    bounds: LatLngBounds,\n    waypoints: Array<DirectionPointWrapper>,\n    subdirections: Array<Direction>,\n    mode: DirectionMode\n  ) {\n    this.from = from\n    this.to = to\n    this.distance = distance\n    this.traveltime = traveltime\n    this.route = route\n    this.bounds = bounds\n    this.waypoints = waypoints\n    this.subdirections = subdirections\n    this.mode = mode\n  }\n}\n\n/**\n * DirectionPointWrapper are you by the SDK when working with direction.\n * You should not instantiate it yourself\n */\nexport class DirectionPointWrapper implements DirectionPoint {\n  objectClass = 'DirectionPointWrapper'\n  latitude?: number\n  longitude?: number\n  floor?: number\n  venueId?: string\n  placeId?: string\n  placeListId?: string\n  constructor(\n    latitude?: number,\n    longitude?: number,\n    floor?: number,\n    venueId?: string,\n    placeId?: string,\n    placeListId?: string\n  ) {\n    this.latitude = latitude\n    this.longitude = longitude\n    this.floor = floor\n    this.venueId = venueId\n    this.placeId = placeId\n    this.placeListId = placeListId\n  }\n}\n\n/**\n * DirectionPointWrapperAndDistance are you by the SDK when working with distances.\n * You should not instantiate it yourself\n */\nexport class DirectionPointWrapperAndDistance\n  extends DirectionPointWrapper\n  implements DirectionPoint {\n  objectClass = 'DirectionPointWrapperAndDistance'\n  distance: number\n  traveltime: number\n  constructor(\n    distance: number,\n    traveltime: number,\n    latitude?: number,\n    longitude?: number,\n    floor?: number,\n    venueId?: string,\n    placeId?: string,\n    placeListId?: string\n  ) {\n    super(latitude, longitude, floor, venueId, placeId, placeListId)\n    this.distance = distance\n    this.traveltime = traveltime\n  }\n}\n\n/**\n * DistanceResponse is returned by the Api.getDistance method.\n * You should not instantiate it yourself\n */\nexport class DistanceResponse {\n  objectClass = 'DistanceResponse'\n  from: DirectionPointWrapper\n  distances: Array<DirectionPointWrapperAndDistance>\n  constructor(\n    from: DirectionPointWrapper,\n    distances: Array<DirectionPointWrapperAndDistance>\n  ) {\n    this.from = from\n    this.distances = distances\n  }\n}\n\n/**\n * DirectionMode are accessible through the SDK and can be used in the Api.getDirection and Api.getDistance methods\n * You should not instantiate it yourself.\n */\nexport class DirectionMode {\n  objectClass = 'DirectionMode'\n  _id: string\n  name: string\n  averageSpeed: number\n  type: string\n  // TODO icon: Image ?\n  constructor(_id: string, name: string, averageSpeed: number, type: string) {\n    this._id = _id\n    this.name = name\n    this.averageSpeed = averageSpeed\n    this.type = type\n  }\n}\n\nexport class Floor {\n  objectClass = 'Floor'\n  number: number\n  name: string\n  constructor(number: number, name: string) {\n    this.number = number\n    this.name = name\n  }\n}\n\nexport class Route {\n  objectClass = 'Route'\n  floor: number\n  fromFloor: number\n  toFloor: number\n  isStart: boolean\n  isEnd: boolean\n  traveltime: number\n  timeToEnd: number\n  distance: number\n  bounds: LatLngBounds\n  connectorTypeTo: string\n  connectorTypeFrom: string\n  path: Array<LatLng>\n  constructor(\n    floor: number,\n    fromFloor: number,\n    toFloor: number,\n    isStart: boolean,\n    isEnd: boolean,\n    traveltime: number,\n    timeToEnd: number,\n    distance: number,\n    bounds: LatLngBounds,\n    connectorTypeTo: string,\n    connectorTypeFrom: string,\n    path: Array<LatLng>\n  ) {\n    this.floor = floor\n    this.fromFloor = fromFloor\n    this.toFloor = toFloor\n    this.isStart = isStart\n    this.isEnd = isEnd\n    this.traveltime = traveltime\n    this.timeToEnd = timeToEnd\n    this.distance = distance\n    this.bounds = bounds\n    this.connectorTypeTo = connectorTypeTo\n    this.connectorTypeFrom = connectorTypeFrom\n    this.path = path\n  }\n}\n\n/**\n * Interface used to represent Mapwize Object that can be used as DirectionPoint\n */\nexport interface DirectionPoint {}\n\n/**\n * LatLng represent a geo coordinate\n */\nexport class LatLng {\n  objectClass = 'LatLng'\n  latitude: number\n  longitude: number\n  constructor(latitude: number, longitude: number) {\n    this.latitude = latitude\n    this.longitude = longitude\n  }\n}\n\n/**\n * LatLngFloor represent a geo coordinate with a floor in order to work inside building\n */\nexport class LatLngFloor extends LatLng implements DirectionPoint {\n  objectClass = 'LatLngFloor'\n  floor: number\n  constructor(latitude: number, longitude: number, floor: number) {\n    super(latitude, longitude)\n    this.floor = floor\n  }\n}\n\n/**\n * LagLngFloorInVenue represent a geo coordinate with a floor and a specific venue. It may be useful with Api.getDirection and Api.getDistance\n */\nexport class LatLngFloorInVenue extends LatLngFloor implements DirectionPoint {\n  objectClass = 'LatLngFloorInVenue'\n  venueId: string\n  constructor(\n    venueId: string,\n    latitude: number,\n    longitude: number,\n    floor: number\n  ) {\n    super(latitude, longitude, floor)\n    this.venueId = venueId\n  }\n}\n\n/**\n * Reprensents Bounding box\n */\nexport class LatLngBounds {\n  objectClass = 'LatLngBounds'\n  southWest: LatLng\n  northEast: LatLng\n  constructor(southWest: LatLng, northEast: LatLng) {\n    this.southWest = southWest\n    this.northEast = northEast\n  }\n}\n\n/**\n * Layer reprensent a floor plan. Layers are provided by the SDK and Api.\n * You should instantiate it yourself.\n */\nexport class Layer {\n  objectClass = 'Layer'\n  _id: string\n  name: string\n  floor: number\n  type: string\n  venueId: string\n  universes: Array<Universe>\n  order: number\n  bounds: LatLngBounds\n  minZoom: number\n  maxZoom: number\n  constructor(\n    _id: string,\n    name: string,\n    floor: number,\n    type: string,\n    venueId: string,\n    universes: Array<Universe>,\n    order: number,\n    bounds: LatLngBounds,\n    minZoom: number,\n    maxZoom: number\n  ) {\n    this._id = _id\n    this.name = name\n    this.floor = floor\n    this.type = type\n    this.venueId = venueId\n    this.universes = universes\n    this.order = order\n    this.bounds = bounds\n    this.minZoom = minZoom\n    this.maxZoom = maxZoom\n  }\n}\n\nexport class MapwizeIcon {\n  objectClass = 'MapwizeIcon'\n  iconKey: string\n  iconBase64: string\n  constructor(iconKey: string, iconBase64: string) {\n    this.iconKey = iconKey\n    this.iconBase64 = iconBase64\n  }\n}\n\n/**\n * Universe are provided by the SDK and the API.\n * You should not instantiate it yourself.\n */\nexport class Universe {\n  objectClass = 'Universe'\n  _id: string\n  name: string\n  constructor(_id: string, name: string) {\n    this._id = _id\n    this.name = name\n  }\n}\n\n/**\n * Organization are provided by the SDK and the API.\n * You should not instantiate it yourself.\n */\nexport class Organization {\n  objectClass = 'Organization'\n  _id: string\n  name: string\n  constructor(_id: string, name: string) {\n    this._id = _id\n    this.name = name\n  }\n}\n\n/**\n * Translation are provided by the SDK and the API.\n * You should not instantiate it yourself.\n */\nexport class Translation {\n  objectClass = 'Translation'\n  _id: string\n  title: string\n  subtitle: string\n  details: string\n  language: string\n  constructor(\n    _id: string,\n    title: string,\n    subtitle: string,\n    details: string,\n    language: string\n  ) {\n    this._id = _id\n    this.title = title\n    this.subtitle = subtitle\n    this.details = details\n    this.language = language\n  }\n}\n\nexport interface MapwizeObject {\n  objectClass: string\n  _id: string\n  name: string\n  alias: string\n  iconUrl: string\n  universes: Array<Universe>\n  data?: Map<string, any>\n  translations: Array<Translation>\n  translation: (language: string) => Translation\n}\n\n/**\n * Place are provided by the SDK and the API.\n * You should not instantiate it yourself.\n */\nexport class Place implements MapwizeObject {\n  objectClass = 'Place'\n  _id: string\n  venueId: string\n  name: string\n  alias: string\n  iconUrl: string\n  universes: Universe[]\n  translations: Translation[]\n  translation: (language: string) => Translation\n  iconBase64: string\n  fillColor: string\n  fillOpacity: number\n  strokeColor: string\n  strokeOpacity: number\n  strokeWidth: number\n  markerDisplay: boolean\n  order: number\n  floor: number\n  isSearchable: boolean\n  isVisible: boolean\n  isClickable: boolean\n  markerCoordinate: LatLngFloor\n  entranceCoordinate: LatLngFloor\n  placeTypeId: string\n  minZoom: number\n  maxZoom: number\n  data?: Map<string, any> | undefined\n  constructor(\n    _id: string,\n    venueId: string,\n    name: string,\n    alias: string,\n    iconUrl: string,\n    universes: Universe[],\n    translations: Translation[],\n    translation: (language: string) => Translation,\n    iconBase64: string,\n    fillColor: string,\n    fillOpacity: number,\n    strokeColor: string,\n    strokeOpacity: number,\n    strokeWidth: number,\n    markerDisplay: boolean,\n    order: number,\n    floor: number,\n    isSearchable: boolean,\n    isVisible: boolean,\n    isClickable: boolean,\n    markerCoordinate: LatLngFloor,\n    entranceCoordinate: LatLngFloor,\n    placeTypeId: string,\n    minZoom: number,\n    maxZoom: number\n  ) {\n    this._id = _id\n    this.venueId = venueId\n    this.name = name\n    this.alias = alias\n    this.iconUrl = iconUrl\n    this.universes = universes\n    this.translations = translations\n    this.translation = translation\n    this.iconBase64 = iconBase64\n    this.fillColor = fillColor\n    this.fillOpacity = fillOpacity\n    this.strokeColor = strokeColor\n    this.strokeOpacity = strokeOpacity\n    this.strokeWidth = strokeWidth\n    this.markerDisplay = markerDisplay\n    this.order = order\n    this.floor = floor\n    this.isSearchable = isSearchable\n    this.isVisible = isVisible\n    this.isClickable = isClickable\n    this.markerCoordinate = markerCoordinate\n    this.entranceCoordinate = entranceCoordinate\n    this.placeTypeId = placeTypeId\n    this.minZoom = minZoom\n    this.maxZoom = maxZoom\n  }\n}\n\n/**\n * Venue are provided by the SDK and the API.\n * You should not instantiate it yourself.\n */\nexport class Venue implements MapwizeObject {\n  objectClass = 'Venue'\n  _id: string\n  name: string\n  alias: string\n  iconUrl: string\n  universes: Universe[]\n  translations: Translation[]\n  translation: (language: string) => Translation\n  defaultLanguage: string\n  supportedLanguages: Array<string>\n  iconBase64: string\n  markerCoordinate: LatLng\n  defaultCenter: LatLng\n  defaultZoom?: number\n  defaultFloor?: number\n  defaultBearing?: number\n  defaultPitch?: number\n  data?: Map<string, any> | undefined\n  constructor(\n    _id: string,\n    name: string,\n    alias: string,\n    iconUrl: string,\n    universes: Universe[],\n    translations: Translation[],\n    translation: (language: string) => Translation,\n    defaultLanguage: string,\n    supportedLanguages: Array<string>,\n    iconBase64: string,\n    markerCoordinate: LatLng,\n    defaultCenter: LatLng,\n    defaultZoom?: number,\n    defaultFloor?: number,\n    defaultBearing?: number,\n    defaultPitch?: number\n  ) {\n    this._id = _id\n    this.name = name\n    this.alias = alias\n    this.iconUrl = iconUrl\n    this.universes = universes\n    this.translations = translations\n    this.translation = translation\n    this.defaultLanguage = defaultLanguage\n    this.supportedLanguages = supportedLanguages\n    this.iconBase64 = iconBase64\n    this.markerCoordinate = markerCoordinate\n    this.defaultCenter = defaultCenter\n    this.defaultZoom = defaultZoom\n    this.defaultFloor = defaultFloor\n    this.defaultBearing = defaultBearing\n    this.defaultPitch = defaultPitch\n  }\n}\n\n/**\n * Placelist are provided by the SDK and the API.\n * You should not instantiate it yourself.\n */\nexport class Placelist implements MapwizeObject {\n  objectClass = 'Placelist'\n  _id: string\n  venueId: string\n  name: string\n  alias: string\n  iconUrl: string\n  universes: Universe[]\n  data?: Map<string, any> | undefined\n  translations: Translation[]\n  translation: (language: string) => Translation\n  placeIds: Array<string>\n  isSearchable: boolean\n  constructor(\n    _id: string,\n    venueId: string,\n    name: string,\n    alias: string,\n    iconUrl: string,\n    universes: Universe[],\n    translations: Translation[],\n    translation: (language: string) => Translation,\n    placeIds: Array<string>,\n    isSearchable: boolean,\n    data?: Map<string, any> | undefined\n  ) {\n    this._id = _id\n    this.venueId = venueId\n    this.name = name\n    this.alias = alias\n    this.iconUrl = iconUrl\n    this.universes = universes\n    this.translations = translations\n    this.translation = translation\n    this.placeIds = placeIds\n    this.isSearchable = isSearchable\n    this.data = data\n  }\n}\n\n/**\n * Style contains properties that allow you to update dynamically the aspect of a place.\n */\nexport class Style {\n  objectClass = 'Style'\n  iconName?: string\n  fillColor?: string\n  fillOpacity?: number\n  strokeColor?: string\n  strokeOpacity?: number\n  strokeWidth?: number\n  markerDisplay?: boolean\n  shapeDisplay?: boolean\n  title?: string\n  constructor(\n    iconName?: string,\n    fillColor?: string,\n    fillOpacity?: number,\n    strokeColor?: string,\n    strokeOpacity?: number,\n    strokeWidth?: number,\n    markerDisplay?: boolean,\n    shapeDisplay?: boolean,\n    title?: string\n  ) {\n    this.iconName = iconName\n    this.fillColor = fillColor\n    this.fillOpacity = fillOpacity\n    this.strokeColor = strokeColor\n    this.strokeOpacity = strokeOpacity\n    this.strokeWidth = strokeWidth\n    this.markerDisplay = markerDisplay\n    this.shapeDisplay = shapeDisplay\n    this.title = title\n  }\n}\n\n/**\n * UserInfo are provided by the SDK and the API.\n * You should not instantiate it yourself.\n */\nexport class UserInfo {\n  objectClass = 'UserInfo'\n  displayName: string\n  email: string\n  organizations: Array<Organization>\n  constructor(\n    displayName: string,\n    email: string,\n    organizations: Array<Organization>\n  ) {\n    this.displayName = displayName\n    this.email = email\n    this.organizations = organizations\n  }\n}\n\n/**\n * ClickEvent are provided by the SDK and the API.\n * You should not instantiate it yourself.\n */\nexport class ClickEvent {\n  objectClass = 'ClickEvent'\n  eventType: 'map_click' | 'place_click' | 'venue_click'\n  latLngFloor: LatLngFloor\n  placePreview?: PlacePreview\n  venuePreview?: VenuePreview\n  constructor(\n    eventType: 'map_click' | 'place_click' | 'venue_click',\n    latLngFloor: LatLngFloor,\n    placePreview?: PlacePreview,\n    venuePreview?: VenuePreview\n  ) {\n    this.eventType = eventType\n    this.latLngFloor = latLngFloor\n    this.placePreview = placePreview\n    this.venuePreview = venuePreview\n  }\n}\n\n/**\n * PlacePreview are provided by the SDK and the API.\n * You should not instantiate it yourself.\n */\nexport class PlacePreview implements DirectionPoint {\n  objectClass = 'PlacePreview'\n  _id: string\n  title: string\n  subtitle: string\n  iconUrl: string\n  defaultCenter: LatLngFloor\n  defaultZoom: number\n  constructor(\n    _id: string,\n    title: string,\n    subtitle: string,\n    iconUrl: string,\n    defaultCenter: LatLngFloor,\n    defaultZoom: number\n  ) {\n    this._id = _id\n    this.title = title\n    this.subtitle = subtitle\n    this.iconUrl = iconUrl\n    this.defaultCenter = defaultCenter\n    this.defaultZoom = defaultZoom\n  }\n}\n\n/**\n * VenuePreview are provided by the SDK and the API.\n * You should not instantiate it yourself.\n */\nexport class VenuePreview {\n  objectClass = 'VenuePreview'\n  _id: string\n  title: string\n  iconUrl: string\n  defaultCenter: LatLng\n  defaultZoom: number\n  defaultBearing: number\n  defaultPitch: number\n  defaultFloor: number\n  constructor(\n    _id: string,\n    title: string,\n    iconUrl: string,\n    defaultCenter: LatLng,\n    defaultZoom: number,\n    defaultBearing: number,\n    defaultPitch: number,\n    defaultFloor: number\n  ) {\n    this._id = _id\n    this.title = title\n    this.iconUrl = iconUrl\n    this.defaultCenter = defaultCenter\n    this.defaultZoom = defaultZoom\n    this.defaultBearing = defaultBearing\n    this.defaultPitch = defaultPitch\n    this.defaultFloor = defaultFloor\n  }\n}\n\n/**\n * DirectionOptions contains property that can be used to configured the camera and icon when starting a direction or a navigation\n */\nexport class DirectionOptions {\n  objectClass = 'DirectionOptions'\n  endMarkerIconName: string\n  displayEndMarker: boolean\n  centerOnStart: boolean\n  displayStartingFloor: boolean\n  constructor() {\n    this.endMarkerIconName = ''\n    this.displayEndMarker = true\n    this.centerOnStart = true\n    this.displayStartingFloor = true\n  }\n  setEndMarkerIconName(endMarkerIconName: string) {\n    this.endMarkerIconName = endMarkerIconName\n    return this\n  }\n  setDisplayEndMarker(displayEndMarker: boolean) {\n    this.displayEndMarker = displayEndMarker\n    return this\n  }\n  setCenterOnStart(centerOnStart: boolean) {\n    this.centerOnStart = centerOnStart\n    return this\n  }\n  setDisplayStartingFloor(displayStartingFloor: boolean) {\n    this.displayStartingFloor = displayStartingFloor\n    return this\n  }\n}\n\n/**\n * MapOptions contains property to configure the initial state of the map.\n */\nexport class MapOptions {\n  objectClass = 'MapOptions'\n  floor?: number\n  language?: string\n  universeId?: string\n  centerOnVenueId?: string\n  centerOnPlaceId?: string\n  restrictContentToVenueIds?: Array<string>\n  restrictContentToOrganizationId?: string\n  logoClickable?: boolean\n  constructor() {}\n  setFloor(floor: number): MapOptions {\n    this.floor = floor\n    return this\n  }\n  setLanguage(language: string): MapOptions {\n    this.language = language\n    return this\n  }\n  setUniverseId(universeId: string): MapOptions {\n    this.universeId = universeId\n    return this\n  }\n  setCenterOnVenueId(centerOnVenueId: string): MapOptions {\n    this.centerOnVenueId = centerOnVenueId\n    return this\n  }\n  setCenterOnPlaceId(centerOnPlaceId: string): MapOptions {\n    this.centerOnPlaceId = centerOnPlaceId\n    return this\n  }\n  setRestrictContentToVenueIds(\n    restrictContentToVenueIds: string[]\n  ): MapOptions {\n    this.restrictContentToVenueIds = restrictContentToVenueIds\n    return this\n  }\n  setRestrictContentToOrganizationId(\n    restrictContentToOrganizationId: string\n  ): MapOptions {\n    this.restrictContentToOrganizationId = restrictContentToOrganizationId\n    return this\n  }\n  setLogoClickable(logoClickable: boolean): MapOptions {\n    this.logoClickable = logoClickable\n    return this\n  }\n}\n\n/**\n * Marker are provided by the SDK and the API.\n * You should not instantiate it yourself.\n */\nexport class Marker {\n  objectClass = 'Marker'\n  position: LatLngFloor | Place | Placelist | PlacePreview\n  markerIconName?: string\n  uuid?: string\n  placePreview?: PlacePreview\n  constructor(\n    position: LatLngFloor | Place | Placelist | PlacePreview,\n    markerIconName?: string\n  ) {\n    this.position = position\n    this.markerIconName = markerIconName\n  }\n}\n\n/**\n * FollowUserMode are provided by the SDK and the API.\n * You should not instantiate it yourself.\n */\nexport class FollowUserMode {\n  objectClass = 'FollowUserMode'\n  followUserMode: 'none' | 'follow_user' | 'follow_user_and_heading'\n  constructor(\n    followUserMode: 'none' | 'follow_user' | 'follow_user_and_heading'\n  ) {\n    this.followUserMode = followUserMode\n  }\n}\n/**\n * IndoorLocation are provided by the SDK and the API.\n * You should not instantiate it yourself.\n */\nexport class IndoorLocation {\n  objectClass = 'IndoorLocation'\n  provider: string\n  latitude: number\n  longitude: number\n  floor: number\n  time: number\n  constructor(\n    provider: string,\n    latitude: number,\n    longitude: number,\n    floor: number,\n    time: number\n  ) {\n    this.provider = provider\n    this.latitude = latitude\n    this.longitude = longitude\n    this.floor = floor\n    this.time = time\n  }\n}\n/**\n * MapwizeIndoorLocation are provided by the SDK and the API.\n * You should not instantiate it yourself.\n */\nexport class MapwizeIndoorLocation extends IndoorLocation {\n  objectClass = 'MapwizeIndoorLocation'\n  constructor(\n    provider: string,\n    latitude: number,\n    longitude: number,\n    floor: number,\n    time: number\n  ) {\n    super(provider, latitude, longitude, floor, time)\n  }\n}\n"]}